#!/bin/bash
# (C) Copyright 2012,2013 Continuent, Inc - Released under the New BSD License
# Version 1.0.5 - 2013-04-03

cookbook_dir=$(dirname $0)

if [ ! -f $cookbook_dir/../CURRENT_TOPOLOGY ]
then
    echo "This command requires an installed cluster"
    exit 1
fi

TOPOLOGY=$(echo $(cat CURRENT_TOPOLOGY) | tr '[a-z]' '[A-Z]')

NODES=NODES_$TOPOLOGY.sh

if [ ! -f $cookbook_dir/BOOTSTRAP.sh ]
then
    echo "$cookbook_dir/BOOTSTRAP.sh not found"
    exit 1
fi

if [ ! -f $cookbook_dir/utilities.sh ]
then
    echo "$cookbook_dir/utilities.sh not found"
    exit 1
fi

. $cookbook_dir/BOOTSTRAP.sh $NODES
. $cookbook_dir/utilities.sh

HOW_MANY_NODES=${#ALL_NODES[*]}
HOW_MANY_MASTERS=${#MASTERS[*]}
HOW_MANY_SLAVES=${#SLAVES[*]}

case $TOPOLOGY in
    MASTER_SLAVE)
        EXPECTED_SERVICES_MASTER=1    
        EXPECTED_SERVICES_SLAVE=1    
    ;;
    FAN_IN)
        EXPECTED_SERVICES_MASTER=1    
        EXPECTED_SERVICES_SLAVE=$(($HOW_MANY_MASTERS-1))
    ;;
    
    STAR)
        EXPECTED_SERVICES_MASTER=1    
        EXPECTED_SERVICES_SLAVE=1
        EXPECTED_SERVICES_HUB=$(($HOW_MANY_MASTERS-1))
    ;;
    ALL_MASTERS)
        EXPECTED_SERVICES_MASTER=1
        EXPECTED_SERVICES_SLAVE=$(($HOW_MANY_MASTERS-1))
    ;;
esac

fill_roles

## MYSQL is defined in BOOTSTRAP.sh
# 

echo "# $LONG_LINE"
echo "# Testing cluster with installed topology '$TOPOLOGY'"
echo "# $LONG_LINE"

COUNT=0
TESTS=0

function ok_equal
{
    fact=$1
    expected=$2
    msg=$3
    if [ "$fact" == "$expected" ]
    then
        echo -n "ok"
    else
        echo -n "not ok"
    fi
    echo " - $msg"
    TESTS=$((TESTS+1))
}


function ok_greater
{
    fact=$1
    expected=$2
    msg=$3
    if [ $fact -ge $expected ]
    then
        echo -n "ok"
    else
        echo -n "not ok"
    fi
    echo " - $msg"
    TESTS=$((TESTS+1))
}


for NODE in ${MASTERS[*]} 
do 
    COUNT=$(($COUNT+1))
    $MYSQL -h $NODE -e "drop table if exists test.t$COUNT"
    $MYSQL -h $NODE -e "drop table if exists test.v$COUNT"
    $MYSQL -h $NODE -e "create table test.t$COUNT(id int not null primary key, c char(20)) engine=innodb"
    $MYSQL -h $NODE -e "create or replace view test.v$COUNT as select * from test.t$COUNT"
    $MYSQL -h $NODE -e "insert into test.v$COUNT values (1, 'inserted by node #$COUNT')"
    HOW_MANY_SERVICES=$($TREPCTL -host $NODE services | grep role | grep master| wc -l)
    # echo "#M> $HOW_MANY_SERVICES"
    ok_greater $HOW_MANY_SERVICES $EXPECTED_SERVICES_MASTER "Master $NODE has at least $EXPECTED_SERVICES_MASTER master services"
    
    if [ -n "$HUB" ]
    then
        if [ -n "$EXPECTED_SERVICES_HUB" ]
        then
            if [ "$NODE" == "$HUB" ]
            then
                HOW_MANY_SERVICES=$($TREPCTL -host $NODE services | grep role |grep slave | wc -l)
                # echo "#H> $HOW_MANY_SERVICES"
                ok_greater $HOW_MANY_SERVICES $EXPECTED_SERVICES_HUB "HUB $NODE has at least $EXPECTED_SERVICES_HUB slave services"
            fi
        fi
    fi
done

sleep 2
for SLAVE in ${SLAVES[*]} 
do
    echo "# slave: $SLAVE"
    COUNT=0
    for NODE in ${MASTERS[*]} 
    do 
        COUNT=$(($COUNT+1))
        TABLE_COUNT=$($MYSQL -BN -h $NODE -e "select count(*) from information_schema.tables where table_schema='test' and  table_name = 't$COUNT'")
        VIEW_COUNT=$($MYSQL -BN -h $NODE -e "select count(*) from information_schema.tables where table_schema='test' and  table_name = 'v$COUNT'")
        RECORD_COUNT=$($MYSQL -BN -h $NODE -e "select count(*) from test.t$COUNT where c = 'inserted by node #$COUNT' ")
        ok_equal $TABLE_COUNT 1 "Tables from master #$COUNT"
        ok_equal $VIEW_COUNT 1 "Views from master #$COUNT"
        ok_equal $RECORD_COUNT 1 "Records from master #$COUNT"
        # $MYSQL -h $NODE -e "select * from test.t$COUNT"
    done
    HOW_MANY_SERVICES=$($TREPCTL -host $SLAVE services | grep role | grep slave| wc -l)
    # echo "#S> $HOW_MANY_SERVICES"
    ok_greater  $HOW_MANY_SERVICES $EXPECTED_SERVICES_SLAVE "Slave $SLAVE has at least $EXPECTED_SERVICES_SLAVE services"
done
echo "1..$TESTS"
