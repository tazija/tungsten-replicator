<?xml version="1.0" encoding="UTF-8"?>
<!-- 
 * Evaluator: Cluster demonstration
 * (c) 2006 Continuent, Inc.. All rights reserved. 
 *
	This is the XML DTD for the Continuent Evaluator configuration files
	
	
-->

<!-- ******************
	  Database
	 ****************** -->
<!ELEMENT Database EMPTY>
<!ELEMENT DataSource EMPTY>

<!--
	The database tag identifies the target database for testing. It can 
	be database in database server such as Postgres or it can be 
	a UNI/Cluster virtualdatabase.
	
		url: The url is the JDBC URL for the test database. Tables will be 
			created and dropped in this database. Do not use a database containing 
			important information. The tables used for testing are not very large, 
			so the disk space requirements are minimal.
		driver: This is the JDBC drive to use for the database connection.
		User: This is the database login for the connection. This user must 
			have the ability to create and drop tables in the specified database.
		password: This is the user’s password in the database.
		timestamptype: This can be used to specify the data type that corresponds
			standard SQL timestamp. Sybase requires the value "datetime", because
			Sybase timestamp type is proprietary data type.
	-->
<!ATTLIST Database
	driver CDATA #REQUIRED
	password CDATA #REQUIRED
	url CDATA #REQUIRED
	user CDATA #REQUIRED
	timestampType CDATA "timestamp"
>

<!ATTLIST DataSource
        name   CDATA #REQUIRED
	driver CDATA #REQUIRED
	password CDATA #REQUIRED
	url CDATA #REQUIRED
	user CDATA #REQUIRED
        isAutoCommit CDATA "true"
	timestampType CDATA "timestamp"
>

<!ELEMENT EvaluatorConfiguration ((Database? | DataSource*), TableGroup+)>
<!--
	This is root element of the XML document. It contains a Database 
	element and one or more TableGroup elements. 
	
		Name: The name attribute identifies the configuration.
		testDuration: The testDuaration indicates how long the test will run. 
			The value is specified in seconds.
		xmlFile: The name of an optional output XML file. This file can be loaded 
			into Excel or other tools in order to create graphs of the results.
		htmlFile: The name of an optional output HTML file. This file is can be displayed
			as a web page or loaded into Excel in order to create graphs of the results.
		csvFile: The name of an optional output CSV file. This file can be loaded into 
		    Excel in order to create graphs of the results.
		statusInterval: Indicates how frequently statistics should be reported. The 
			statistics go to the standard out device and to the XML file if one 
			is specified. The value is specified in seconds.
		autoCommit: Indicates whether or not the queries are executed in autocommit 
			mode.	
	-->
<!ATTLIST EvaluatorConfiguration
	name CDATA #REQUIRED
	testDuration CDATA "10"
	autoCommit (true | false) "true"
	xmlFile CDATA ""
	htmlFile CDATA ""
	csvFile CDATA ""
	separator CDATA ""
	statusInterval CDATA "2"
>
<!--
	The TableGroup tag defines a set of tables containing the test data.
	The set consists for 3 tables. The table names are generated by placing 1, 2, 
	and 3 after the specified name. The base tables (numbers 1 and 2) are 
	loaded with the number of rows specified by the size attribute. Third table is 
	loaded by joining the base tables to form a cross product. Therefore, the third 
	table’s row count is the square of the size. A TableGroup contains one or more 
	ThreadGroup tags. 
		
		name: This will be the prefix of tables created. Therefore, it must be a valid
			SQL identifier. 
		size: This specifies the number of rows in the base tables.
		initializeDDL: indicates whether or not tables and stored procedures should be created.
		truncateTable: the command used to clear data from the table when initializeDDL is false.
	-->
<!ELEMENT TableGroup (ThreadGroup+)>
<!ATTLIST TableGroup
	name CDATA #REQUIRED
	size CDATA "100"
	initializeDDL (true | false) "true"
	truncateTable CDATA "truncate table "
        dataSource CDATA "default"
>
<!ELEMENT ThreadGroup EMPTY>
<!--
	The ThreadGroup tag defines a set of client threads that will generate
	requests against the target database. 

		Name: This the prefix for the client names. The names will be generated 
			by adding a number suffix.
		threadCount: This is the number of clients in this group.
		readSize: This is the average number of rows that should be returned by the select 
			query.
		thinkTime: This is the average amount of time in milliseconds the client will 
			sleep between queries.
		rampUpInterval: This specifies the period of time in seconds to wait before 
			starting the next group of client threads. The number of threads started in 
			each group is specified by the rampUpIncrement attribute. The value 0 
			indicates that all threads should be started immediately.
		rampUpIncrement: This specifies the number of threads to start each rampUpIncrement 
			period. The value 0 indicates there is no ramp up and all threads will be 
			started immediately.
		updates: This is the percentage of the queries that should be update requests. 
		inserts: This specifies the percentage of the queries that should be insert requests.
		deletes: This specifies the percentage of the queries that should be delete requests.
		reconnectInterval: Indicates how often the clients 
		queryFormat: Indicates whether the queries should be plain SQL or stored 
			procedures using the specified plaform format. There are 3 options sql, sybaseProcedure 
			and custom. sql uses plain sql for the queries. sybaseProcedure generates 
			and uses stored procedures in Sybase format. custom expects 4 stored procedures 
		    to exist in the database. The procedures are ({name} is the TableGroup name attribute):
				get_{name}3(int, int, int, int)
				update_{name}3(int, timestamp, int, int)
	            delete_{name}3(int, int)
				insert_{name}3(int, int, timestamp, timestamp, int)
	
			Custom stored procedures can do anything they want. The sybaseProcedure option 
			handles configuring the scluster semantic information for the stored procedures. 
			Custom stored procedures must set up uni/cluster semantic information as nessecary.
		queryWeight:  Indicates the relative CPU cost of the read query when using SQL.  
			The values are 'heavy', 'medium', and 'light'.  
	-->
<!ATTLIST ThreadGroup
	dataSource CDATA "default"
	deletes CDATA "0"
	inserts CDATA "0"
	name CDATA #REQUIRED
	readSize CDATA "2"
	threadCount CDATA "5"
	updates CDATA "0"
	thinkTime CDATA "0"
	rampUpInterval CDATA "0"
	rampUpIncrement CDATA "5"
	reconnectInterval CDATA "15"
	queryFormat (sql | sybaseProcedure | custom) "sql"
	queryWeight (heavy | medium | light) "heavy"
>
